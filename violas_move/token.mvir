module ViolasToken {

    import 0x00.LibraAccount;
    import 0x0.LibraCoin;
    import 0x00.Hash;
    import 0x0.U64Util;
    import 0x0.AddressUtil;
    import 0x0.BytearrayUtil;
    import 0x0.Vector;
        
    resource Owner {}

    // A resource representing the ViolasToken
    resource T {
        value: u64,
    }

    resource Info {
        magic: u64,
        token: address,
        violas_events: LibraAccount.EventHandle<Self.ViolasEvent>,
    }

    resource OwnerData {
        data: bytearray,
        owner: address,
        bulletins: Vector.T<bytearray>,
    }

    resource OwnerOrder {
        owner: Self.Owner,
        buyer: address,
        price: u64,
    }

    struct ViolasEvent {
        etype: u64,
        sender: address,
        seq: u64,
        paras: bytearray,
        data:  bytearray,
    }
    
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    resource SCoin2VCoinOrder {
        token: Self.T,
        price: u64,
    }

    resource VCoin2SCoinOrder {
        token: LibraCoin.T,
        price: u64,
    }

    // struct ThirdPartyOrder {
    //     maker: address,
    //     taker: address,
    //     token: address,
    //     amount: u64,
    //     price: u64,
    // }
    
    // resource GuaranteeDeposit {
    //     deposit: Self.T,
    //     balance: u64,
    //     fullbalance: u64,
    //     orders: Vector.T<Self.ThirdPartyOrder>,
    //     free_order_slots: Vector.T<u64>,
    // }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////

    bytes_append_address(paras: bytearray, addr: address) : bytearray {
        return BytearrayUtil.bytearray_concat(move(paras), AddressUtil.address_to_bytes(move(addr)));
    }

    bytes_append_u64(paras: bytearray, num: u64) : bytearray {
        return BytearrayUtil.bytearray_concat(move(paras), U64Util.u64_to_bytes(move(num)));
    }

    bytes_append_bool(paras: bytearray, b: bool) : bytearray {
        let num: u64;
        if(move(b)) {
            num = 1;
        } else {
            num = 0;
        }
        return BytearrayUtil.bytearray_concat(move(paras), U64Util.u64_to_bytes(move(num)));
    }
    
    bytes_append_bytes(paras: bytearray, data: bytearray) : bytearray {
        return BytearrayUtil.bytearray_concat(move(paras), move(data));
    }

    public zero(): Self.T {
        return T{ value: 0 };
    }

    value(coin_ref: &Self.T): u64 {
        return *&move(coin_ref).value;
    }
    
    balance(): u64  acquires T {
        let token_ref: &Self.T;
        Self.require_published();
        token_ref = borrow_global<T>(get_txn_sender());
        return *(&move(token_ref).value);
    }

    require_published() {
        assert(exists<T>(get_txn_sender()), 101)
        return;
    }
    
    require_owner() {
        assert(exists<Owner>(get_txn_sender()), 102);
        return;
    }

    publish_impl(data: bytearray) {
        let sender: address;
        sender = get_txn_sender();

        assert(!exists<T>(copy(sender)), 100);
        
        if (copy(sender) == 0x7257c2417e4d1038e1817c8f283ace2e1041b3396cdbb099eb357bbee024d614) {
            move_to_sender<Owner>(Owner{});
            move_to_sender<OwnerData>(OwnerData{ data: copy(data), owner: 0x7257c2417e4d1038e1817c8f283ace2e1041b3396cdbb099eb357bbee024d614, bulletins: Vector.empty<bytearray>() });
        }

        move_to_sender<T>(T{ value: 0 });
        move_to_sender<Info>(Info{
            magic: 123456789,
            token: 0x7257c2417e4d1038e1817c8f283ace2e1041b3396cdbb099eb357bbee024d614,
            violas_events: LibraAccount.new_event_handle<Self.ViolasEvent>(),
        });
        
        return;
    }
    
    public publish() acquires Info {
        Self.publish_impl(h"");
        Self.emit_events(0, get_txn_sender(), h"", h"");
        return;
    }

    public owner_publish(data: bytearray) acquires Info {
        assert(get_txn_sender() == 0x7257c2417e4d1038e1817c8f283ace2e1041b3396cdbb099eb357bbee024d614, 107);
        Self.publish_impl(copy(data));
        Self.emit_events(9, get_txn_sender(), move(data), h"");
        return;
    }
    
    // Mint new dTokens.
    mint(value: u64): Self.T {
        Self.require_published();
        Self.require_owner();
        return T{value: move(value)};
    }

    public mint_to_address(payee: address, amount: u64) acquires T, Info {
        return Self.mint_to_address_with_data(move(payee), move(amount), h"");
    }

    public mint_to_address_with_data(payee: address, amount: u64, data: bytearray) acquires T, Info {
        let paras: bytearray;
        let token: Self.T;

        token = Self.mint(copy(amount));
        
        Self.deposit(copy(payee), move(token));

        paras = h"";
        paras = Self.bytes_append_address(move(paras), copy(payee));
        paras = Self.bytes_append_u64(move(paras), move(amount));
        paras = Self.bytes_append_bytes(move(paras), move(data));
        
        Self.emit_events(1, copy(payee), move(paras), h"");
        
        return;
    }

    deposit(payee: address, to_deposit: Self.T) acquires T {
        let payee_token_ref: &mut Self.T;
        let payee_token_value: u64;
        let to_deposit_value: u64;

        Self.require_published();
        
        payee_token_ref = borrow_global_mut<T>(copy(payee));
        payee_token_value = *(&copy(payee_token_ref).value);

        T{ value: to_deposit_value } = move(to_deposit);

        *(&mut move(payee_token_ref).value) = move(payee_token_value) + move(to_deposit_value);

        return;
    }
    
    withdraw(amount: u64): Self.T acquires T {
        let sender: address;
        let sender_token_ref: &mut Self.T;
        let value: u64;

        Self.require_published();

        sender = get_txn_sender();
        
        sender_token_ref = borrow_global_mut<T>(move(sender));
        value = *(&copy(sender_token_ref).value);

        assert(copy(value) >= copy(amount), 103);

        *(&mut move(sender_token_ref).value) = move(value) - copy(amount);
        
        return T{ value: move(amount) };
    }

    pay_from_sender(payee: address, amount: u64) acquires T {
        let sender: address;
        let to_pay: Self.T;

        Self.require_published();
        sender = get_txn_sender();
        to_pay = Self.withdraw(copy(amount));
        Self.deposit(copy(payee), move(to_pay));
        
        return;
    }

    public transfer(payee: address, amount: u64) acquires T, Info {
        return Self.transfer_with_data(move(payee), move(amount), h"");
    }

    public transfer_with_data(payee: address, amount: u64, data: bytearray) acquires T, Info {
        let paras: bytearray;
        
        Self.pay_from_sender(copy(payee), copy(amount));

        paras = h"";
        paras = Self.bytes_append_address(move(paras), copy(payee));
        paras = Self.bytes_append_u64(move(paras), move(amount));
        paras = Self.bytes_append_bytes(move(paras), move(data));
        
        Self.emit_events(2, copy(payee), move(paras), h"");
        
        return;
    }

    public make_owner_order(price: u64, buyer: address) acquires Info, Owner {
        let paras: bytearray;
        let sender: address;
        let owner: Self.Owner;

        Self.require_published();
        Self.require_owner();
        
        sender = get_txn_sender();

        owner = move_from<Owner>(copy(sender));
        move_to_sender<OwnerOrder>(OwnerOrder{owner: move(owner), buyer: copy(buyer), price: copy(price)});
        
        paras = h"";
        paras = Self.bytes_append_u64(move(paras), move(price));
        paras = Self.bytes_append_address(move(paras), copy(buyer));
        
        Self.emit_events(14, copy(buyer), move(paras), h"");
        
        return;
    }
    
    public cancel_owner_order() acquires OwnerOrder, Info {
        let sender: address;
        let ownerorder: Self.OwnerOrder;
        let owner: Self.Owner;
        let buyer: address;
        let price: u64;
        
        Self.require_published();
        
        sender = get_txn_sender();

        ownerorder = move_from<OwnerOrder>(copy(sender));
        OwnerOrder { owner:owner, buyer:buyer, price:price } = move(ownerorder);

        move_to_sender<Owner>(move(owner));
        
        Self.emit_events(15, copy(sender), h"", h"");
        
        return;
    }

    public take_owner_order(maker: address, price_in: u64) acquires OwnerOrder, OwnerData, Info {
        let paras: bytearray;
        let sender: address;
        let ownerorder: Self.OwnerOrder;
        let owner: Self.Owner;
        let buyer: address;
        let price: u64;
        let ownerdata: &mut Self.OwnerData;

        Self.require_published();
        
        sender = get_txn_sender();

        ownerorder = move_from<OwnerOrder>(copy(maker));
        OwnerOrder { owner:owner, buyer:buyer, price:price } = move(ownerorder);

        if(copy(buyer) != copy(maker)) {
            assert(copy(buyer) == copy(sender), 106);
        }
        
        assert(copy(price) == copy(price_in), 105);

        if(copy(price) > 0) {
            LibraAccount.pay_from_sender(copy(maker), copy(price));
        }
        
        move_to_sender<Owner>(move(owner));

        if(exists<OwnerData>(0x7257c2417e4d1038e1817c8f283ace2e1041b3396cdbb099eb357bbee024d614)) {
            ownerdata = borrow_global_mut<OwnerData>(0x7257c2417e4d1038e1817c8f283ace2e1041b3396cdbb099eb357bbee024d614);
            *(&mut move(ownerdata).owner) = copy(sender);
        }
        
        paras = h"";
        paras = Self.bytes_append_address(move(paras), copy(maker));
        paras = Self.bytes_append_u64(move(paras), move(price_in));
        
        Self.emit_events(16, copy(maker), move(paras), h"");
        
        return;
    }

    public owner_bulletin(data: bytearray) acquires OwnerData, Info {
        let sender: address;
        let ownerdata: &mut Self.OwnerData;
        let senderbytes: bytearray;
        let dstbytes: bytearray;
        
        Self.require_published();
        Self.require_owner();
        sender = get_txn_sender();
        
        senderbytes = AddressUtil.address_to_bytes(copy(sender));
        dstbytes = BytearrayUtil.bytearray_concat(move(senderbytes), copy(data));
        
        ownerdata = borrow_global_mut<OwnerData>(0x7257c2417e4d1038e1817c8f283ace2e1041b3396cdbb099eb357bbee024d614);
        Vector.push_back<bytearray>(&mut move(ownerdata).bulletins, copy(dstbytes));

        Self.emit_events(19, copy(sender), move(data), h"");
        
        return;
    }

    public owner_update_first_bulletin(data: bytearray) acquires OwnerData, Info {
        let sender: address;
        let ownerdata: &mut Self.OwnerData;
        let senderbytes: bytearray;
        let dstbytes: bytearray;
        
        Self.require_published();
        Self.require_owner();
        sender = get_txn_sender();
        
        senderbytes = AddressUtil.address_to_bytes(copy(sender));
        dstbytes = BytearrayUtil.bytearray_concat(move(senderbytes), copy(data));
        
        ownerdata = borrow_global_mut<OwnerData>(0x7257c2417e4d1038e1817c8f283ace2e1041b3396cdbb099eb357bbee024d614);

        Vector.set<bytearray>(&mut move(ownerdata).bulletins, 0, copy(dstbytes));
        
        Self.emit_events(20, copy(sender), move(data), h"");
        
        return;
    }

    public destroy_owner() acquires Owner, Info {
        let sender: address;
        let owner: Self.Owner;
        let value: u64;
        
        Self.require_published();
        Self.require_owner();
        sender = get_txn_sender();
        
        owner = move_from<Owner>(copy(sender));
        Owner {} = move(owner);
        
        Self.emit_events(17, copy(sender), h"", h"");

        return;
    }

    public destroy_coin(amount: u64) acquires T, Info {
        let paras: bytearray;
        let sender: address;
        let coin: Self.T;
        let value: u64;

        Self.require_published();
        Self.require_owner();
        sender = get_txn_sender();
        
        coin = Self.withdraw(copy(amount));
        T { value: value } = move(coin);

        paras = h"";
        paras = Self.bytes_append_u64(move(paras), move(amount));
        
        Self.emit_events(18, copy(sender), move(paras), h"");
        
        return;
    }
    
    public record(data: bytearray) acquires Info {
        let sender: address;
        sender = get_txn_sender();
        Self.emit_events(11, copy(sender), move(data), h"");
        return;
    }

    emit_events(etype: u64, receiver: address, paras: bytearray, data: bytearray) acquires Info {

        let sender: address;
        let seq: u64;
        let violas_event: Self.ViolasEvent;
        let sender_info_ref: &mut Self.Info;
        let receiver_info_ref: &mut Self.Info;
        
        sender = get_txn_sender();

        seq = LibraAccount.sequence_number(copy(sender));
        
        violas_event = ViolasEvent {
            etype: copy(etype),
            sender: copy(sender),
            seq: copy(seq),
            paras: move(paras),
            data: move(data),
        };

        sender_info_ref = borrow_global_mut<Info>(copy(sender));
        LibraAccount.emit_event<Self.ViolasEvent>(&mut move(sender_info_ref).violas_events, copy(violas_event));

        if(copy(sender) != copy(receiver)) {
            receiver_info_ref = borrow_global_mut<Info>(copy(receiver));  
            LibraAccount.emit_event<Self.ViolasEvent>(&mut move(receiver_info_ref).violas_events, copy(violas_event));
        }
        
        return;
    }
    
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////

    // public transfer_vcoin_with_data(payee: address, amount: u64, data: bytearray) acquires Info {
    //     LibraAccount.pay_from_sender(copy(payee), copy(amount));
    //     Self.emit_events(10, copy(payee), copy(amount), 0, move(data));
    //     return;
    // }
    
    public make_order(amount: u64, price: u64, scoin2vcoin: bool) acquires T, Info {
        let paras: bytearray;
        let sender: address;
        let token: Self.T;
        let token2: LibraCoin.T;
        let sender_info_ref: &mut Self.Info;

        Self.require_published();
        sender = get_txn_sender();

        if(copy(scoin2vcoin)) {
            token = Self.withdraw(copy(amount));
            move_to_sender<SCoin2VCoinOrder>(SCoin2VCoinOrder { token: move(token), price: copy(price)});
        } else {
            token2 = LibraAccount.withdraw_from_sender(copy(amount));
            move_to_sender<VCoin2SCoinOrder>(VCoin2SCoinOrder { token: move(token2), price: copy(price)});
        }

        paras = h"";
        paras = Self.bytes_append_u64(move(paras), copy(amount));
        paras = Self.bytes_append_u64(move(paras), copy(price));
        paras = Self.bytes_append_bool(move(paras), copy(scoin2vcoin));
        
        Self.emit_events(3, copy(sender), copy(paras), h"");            
        return;
    }

    public cancel_order(scoin2vcoin: bool) acquires T, SCoin2VCoinOrder, VCoin2SCoinOrder, Info {
        let paras: bytearray;
        let sender: address;
        let order: Self.SCoin2VCoinOrder;
        let order2: Self.VCoin2SCoinOrder;
        let token: Self.T;
        let token2: LibraCoin.T;
        let price: u64;
        let sender_info_ref: &mut Self.Info;
        let amount: u64;
        
        Self.require_published();
        sender = get_txn_sender();

        if(copy(scoin2vcoin)) {
            order = move_from<SCoin2VCoinOrder>(copy(sender));
            SCoin2VCoinOrder { token:token, price:price } = move(order);
            amount = Self.value(&token);
            Self.deposit(copy(sender), move(token));
        } else {        
            order2 = move_from<VCoin2SCoinOrder>(copy(sender));
            VCoin2SCoinOrder { token:token2, price:price } = move(order2);
            amount = LibraCoin.value(&token2);
            LibraAccount.deposit(copy(sender), move(token2));
        }
        
        paras = h"";
        paras = Self.bytes_append_bool(move(paras), copy(scoin2vcoin));
        
        Self.emit_events(4, copy(sender), copy(paras), h"");            
        return;
    }

    
    // // Currently only support buy whole order, not support split order.
    public take_order(maker: address, amount_in: u64, price_in: u64, scoin2vcoin: bool) acquires T, SCoin2VCoinOrder, VCoin2SCoinOrder, Info {
        let paras: bytearray;
        let sender: address;
        let order: Self.SCoin2VCoinOrder;
        let order2: Self.VCoin2SCoinOrder;
        let token: Self.T;
        let token2: LibraCoin.T;
        let price: u64;
        let sender_info_ref: &mut Self.Info;
        let amount: u64;
        
        Self.require_published();
        sender = get_txn_sender();

        if(copy(scoin2vcoin)) {
            order = move_from<SCoin2VCoinOrder>(copy(maker));
            SCoin2VCoinOrder { token:token, price:price } = move(order);
            amount = Self.value(&token);
            LibraAccount.pay_from_sender(copy(maker), copy(price));
            Self.deposit(copy(sender), move(token));
        } else {
            order2 = move_from<VCoin2SCoinOrder>(copy(maker));
            VCoin2SCoinOrder { token:token2, price:price } = move(order2);
            amount = LibraCoin.value(&token2);
            Self.pay_from_sender(copy(maker), copy(price));
            LibraAccount.deposit(copy(sender), move(token2));
        }

        assert(copy(amount) == copy(amount_in), 104);
        assert(copy(price) == copy(price_in), 105);
        
        paras = h"";
        paras = Self.bytes_append_address(move(paras), copy(maker));
        paras = Self.bytes_append_u64(move(paras), copy(amount_in));
        paras = Self.bytes_append_u64(move(paras), copy(price_in));
        paras = Self.bytes_append_bool(move(paras), copy(scoin2vcoin));

        Self.emit_events(5, copy(maker), copy(paras), h"");            
        return;
    }

    // thirdparty_order_is_empty(order: & Self.ThirdPartyOrder) : bool {
    //     return *&copy(order).amount == 0;
    // }
    
    // public thirdparty_take_or_cancel_order(take_or_cancel: bool, orderidx: u64, maker: address, taker: address, token: address, amount: u64, price: u64) acquires T, Info, GuaranteeDeposit {
        
    //     let sender: address;
    //     let gd: &mut Self.GuaranteeDeposit;
    //     let oribalance: u64;
    //     let order: Self.ThirdPartyOrder;
    //     let orderref: &mut Self.ThirdPartyOrder;
    //     let order2: Self.ThirdPartyOrder;
    //     let order3: Self.ThirdPartyOrder;
    //     let len: u64;
    //     let count: u64;
        
    //     Self.require_published();
    //     sender = get_txn_sender();

    //     assert(copy(amount) > 0, 110);
        
    //     gd = borrow_global_mut<GuaranteeDeposit>(copy(sender));

    //     oribalance = *(&copy(gd).balance);
        
    //     order = Vector.get<Self.ThirdPartyOrder>(& copy(gd).orders, copy(orderidx));
    //     orderref = &mut order;
    //     assert(*&copy(orderref).maker  == copy(maker),  112);
    //     assert(*&copy(orderref).taker  == copy(taker),  113);
    //     assert(*&copy(orderref).token  == copy(token),  114);
    //     assert(*&copy(orderref).amount == copy(amount), 115);
    //     assert(*&copy(orderref).price  == copy(price),  116);

    //     if(copy(take_or_cancel)) {
    //         Self.pay_from_sender(copy(taker), copy(amount));
    //     } else {
    //         Self.pay_from_sender(copy(maker), copy(amount));
    //     }

    //     *&mut copy(gd).balance = copy(oribalance) + copy(amount);
        
    //     order2 = ThirdPartyOrder {
    //         maker: copy(sender),
    //         taker: copy(sender),
    //         token: copy(sender),
    //         amount: 0,
    //         price: 0,
    //     };
    //     Vector.set<Self.ThirdPartyOrder>(&mut copy(gd).orders, copy(orderidx), move(order2));

    //     Vector.push_back<u64>(&mut copy(gd).free_order_slots, copy(orderidx));
        
    //     if(copy(take_or_cancel)) {        
    //         Self.emit_events(24, copy(taker), move(amount), move(price), h"");
    //     } else {
    //         Self.emit_events(24, copy(maker), move(amount), move(price), h"");
    //     }
        
    //     return;
    // }

    // public thirdparty_make_order(thirdparty: address, taker: address, token: address, amount: u64, price: u64) acquires T, Info, GuaranteeDeposit {

    //     let sender: address;
    //     let gd: &mut Self.GuaranteeDeposit;
    //     let oribalance: u64;
    //     let orders: &mut Vector.T<Self.ThirdPartyOrder>;
    //     let order: Self.ThirdPartyOrder;
    //     let len: u64;
    //     let freeSlotsLen: u64;
    //     let slotidx: u64;
    //     let data: bytearray;
        
    //     Self.require_published();
    //     sender = get_txn_sender();

    //     gd = borrow_global_mut<GuaranteeDeposit>(copy(thirdparty));
    //     orders = &mut copy(gd).orders;
            
    //     oribalance = *(&copy(gd).balance);

    //     assert(copy(amount) > 0, 110);
    //     assert(copy(oribalance) >= copy(amount), 111);

    //     *(&mut copy(gd).balance) = copy(oribalance) - copy(amount);
        
    //     Self.pay_from_sender(copy(thirdparty), copy(amount));

    //     order = ThirdPartyOrder{
    //         maker: copy(sender),
    //         taker: copy(taker),
    //         token: copy(token),
    //         amount: copy(amount),
    //         price: copy(price),
    //     };

    //     freeSlotsLen = Vector.length<u64>(& copy(gd).free_order_slots);

    //     if(copy(freeSlotsLen) > 0) {
    //         slotidx = Vector.get<u64>(& copy(gd).free_order_slots, copy(freeSlotsLen)-1);
    //         _ = Vector.pop_back<u64>(&mut copy(gd).free_order_slots);
    //         Vector.set<Self.ThirdPartyOrder>(copy(orders), copy(slotidx), move(order));
    //         data = U64Util.u64_to_bytes(copy(slotidx));
    //         Self.emit_events(23, copy(thirdparty), move(amount), move(price), move(data));
    //     } else {
    //         len = Vector.length<Self.ThirdPartyOrder>(freeze(copy(orders)));
    //         assert(copy(len) < 4000, 117);
    //         Vector.push_back<Self.ThirdPartyOrder>(copy(orders), move(order));
    //         data = U64Util.u64_to_bytes(copy(len));
    //         Self.emit_events(23, copy(thirdparty), move(amount), move(price), move(data));
    //     }
        
    //     return;
    // }
    
    // public thirdparty_withdraw_guarantee_deposit() acquires T, Info, GuaranteeDeposit {
        
    //     let sender: address;
    //     let token: Self.T;
    //     let balance: u64;
    //     let fullbalance: u64;
    //     let gdv: Self.GuaranteeDeposit;
    //     let orders: Vector.T<Self.ThirdPartyOrder>;
    //     let value: u64;
    //     let free_order_slots: Vector.T<u64>;
        
    //     Self.require_published();
    //     sender = get_txn_sender();

    //     gdv = move_from<GuaranteeDeposit>(copy(sender));

    //     GuaranteeDeposit{ deposit: token, balance: balance, fullbalance: fullbalance, orders: orders, free_order_slots: free_order_slots } = move(gdv);

    //     assert(copy(balance) == copy(fullbalance), 109);
        
    //     value = Self.value(&token);
    //     Self.deposit(copy(sender), move(token));

    //     Self.emit_events(22, copy(sender), move(value), 0, h"");
        
    //     return;
    // }
    
    // public thirdparty_increase_guarantee_deposit(in_amount: u64) acquires T, Info, GuaranteeDeposit {
        
    //     let sender: address;
    //     let token: Self.T;
    //     let gd: &mut Self.GuaranteeDeposit;
    //     let gddeposit: &mut Self.T;
    //     let oribalance: u64;
    //     let orifullbalance: u64;
    //     let orivalue: u64;
    //     let amount: u64;
        
    //     Self.require_published();
    //     sender = get_txn_sender();

    //     token = Self.withdraw(copy(in_amount));
    //     T {value: amount } = move(token);
        
    //     if(!exists<GuaranteeDeposit>(copy(sender))) {
    //         move_to_sender<GuaranteeDeposit>(GuaranteeDeposit{
    //             deposit: Self.zero(),
    //             balance: 0,
    //             fullbalance: 0,
    //             orders: Vector.empty<Self.ThirdPartyOrder>(),
    //             free_order_slots: Vector.empty<u64>(),
    //         });  
    //     }

    //     gd = borrow_global_mut<GuaranteeDeposit>(copy(sender));
    //     gddeposit = &mut copy(gd).deposit;
            
    //     oribalance = *(&copy(gd).balance);
    //     orifullbalance = *(&copy(gd).fullbalance);
    //     orivalue = *(&copy(gddeposit).value);
        
    //     *(&mut copy(gd).balance) = copy(oribalance) + copy(amount)*9/10;
    //     *(&mut move(gd).fullbalance) = copy(orifullbalance) + copy(amount)*9/10;
    //     *(&mut move(gddeposit).value) = copy(orivalue) + copy(amount);

    //     Self.emit_events(21, copy(sender), copy(amount), 0, h"");
        
    //     return;
    // }

    // myassert(cond: bool, status: u64) : bool acquires Info {
    //     let sender: address;
    //     sender = get_txn_sender();
    //     if(!copy(cond)) {
    //         Self.emit_events(move(status)+5000, move(sender), 0, 0, h"");
    //     }
    //     return move(cond);
    // }
    
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    
}










